// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	"sync"

	"github.com/nadundesilva/k8s-replicator/pkg/replicator/resources"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ensure, that ResourceReplicatorMock does implement resources.ResourceReplicator.
// If this is not the case, regenerate this file with moq.
var _ resources.ResourceReplicator = &ResourceReplicatorMock{}

// ResourceReplicatorMock is a mock implementation of resources.ResourceReplicator.
//
// 	func TestSomethingThatUsesResourceReplicator(t *testing.T) {
//
// 		// make and configure a mocked resources.ResourceReplicator
// 		mockedResourceReplicator := &ResourceReplicatorMock{
// 			ApplyFunc: func(ctx context.Context, namespace string, object metav1.Object) error {
// 				panic("mock out the Apply method")
// 			},
// 			DeleteFunc: func(ctx context.Context, namespace string, name string) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetFunc: func(ctx context.Context, namespace string, name string) (metav1.Object, error) {
// 				panic("mock out the Get method")
// 			},
// 			InformerFunc: func() cache.SharedInformer {
// 				panic("mock out the Informer method")
// 			},
// 			ListFunc: func(namespace string, selector labels.Selector) ([]metav1.Object, error) {
// 				panic("mock out the List method")
// 			},
// 			ResourceApiVersionFunc: func() string {
// 				panic("mock out the ResourceApiVersion method")
// 			},
// 			ResourceKindFunc: func() string {
// 				panic("mock out the ResourceKind method")
// 			},
// 		}
//
// 		// use mockedResourceReplicator in code that requires resources.ResourceReplicator
// 		// and then make assertions.
//
// 	}
type ResourceReplicatorMock struct {
	// ApplyFunc mocks the Apply method.
	ApplyFunc func(ctx context.Context, namespace string, object metav1.Object) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(ctx context.Context, namespace string, name string) error

	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, namespace string, name string) (metav1.Object, error)

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedInformer

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]metav1.Object, error)

	// ResourceApiVersionFunc mocks the ResourceApiVersion method.
	ResourceApiVersionFunc func() string

	// ResourceKindFunc mocks the ResourceKind method.
	ResourceKindFunc func() string

	// calls tracks calls to the methods.
	calls struct {
		// Apply holds details about calls to the Apply method.
		Apply []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Object is the object argument value.
			Object metav1.Object
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
		// ResourceApiVersion holds details about calls to the ResourceApiVersion method.
		ResourceApiVersion []struct {
		}
		// ResourceKind holds details about calls to the ResourceKind method.
		ResourceKind []struct {
		}
	}
	lockApply              sync.RWMutex
	lockDelete             sync.RWMutex
	lockGet                sync.RWMutex
	lockInformer           sync.RWMutex
	lockList               sync.RWMutex
	lockResourceApiVersion sync.RWMutex
	lockResourceKind       sync.RWMutex
}

// Apply calls ApplyFunc.
func (mock *ResourceReplicatorMock) Apply(ctx context.Context, namespace string, object metav1.Object) error {
	if mock.ApplyFunc == nil {
		panic("ResourceReplicatorMock.ApplyFunc: method is nil but ResourceReplicator.Apply was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Object    metav1.Object
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Object:    object,
	}
	mock.lockApply.Lock()
	mock.calls.Apply = append(mock.calls.Apply, callInfo)
	mock.lockApply.Unlock()
	return mock.ApplyFunc(ctx, namespace, object)
}

// ApplyCalls gets all the calls that were made to Apply.
// Check the length with:
//     len(mockedResourceReplicator.ApplyCalls())
func (mock *ResourceReplicatorMock) ApplyCalls() []struct {
	Ctx       context.Context
	Namespace string
	Object    metav1.Object
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Object    metav1.Object
	}
	mock.lockApply.RLock()
	calls = mock.calls.Apply
	mock.lockApply.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ResourceReplicatorMock) Delete(ctx context.Context, namespace string, name string) error {
	if mock.DeleteFunc == nil {
		panic("ResourceReplicatorMock.DeleteFunc: method is nil but ResourceReplicator.Delete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(ctx, namespace, name)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedResourceReplicator.DeleteCalls())
func (mock *ResourceReplicatorMock) DeleteCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ResourceReplicatorMock) Get(ctx context.Context, namespace string, name string) (metav1.Object, error) {
	if mock.GetFunc == nil {
		panic("ResourceReplicatorMock.GetFunc: method is nil but ResourceReplicator.Get was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedResourceReplicator.GetCalls())
func (mock *ResourceReplicatorMock) GetCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ResourceReplicatorMock) Informer() cache.SharedInformer {
	if mock.InformerFunc == nil {
		panic("ResourceReplicatorMock.InformerFunc: method is nil but ResourceReplicator.Informer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	mock.lockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedResourceReplicator.InformerCalls())
func (mock *ResourceReplicatorMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockInformer.RLock()
	calls = mock.calls.Informer
	mock.lockInformer.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ResourceReplicatorMock) List(namespace string, selector labels.Selector) ([]metav1.Object, error) {
	if mock.ListFunc == nil {
		panic("ResourceReplicatorMock.ListFunc: method is nil but ResourceReplicator.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedResourceReplicator.ListCalls())
func (mock *ResourceReplicatorMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// ResourceApiVersion calls ResourceApiVersionFunc.
func (mock *ResourceReplicatorMock) ResourceApiVersion() string {
	if mock.ResourceApiVersionFunc == nil {
		panic("ResourceReplicatorMock.ResourceApiVersionFunc: method is nil but ResourceReplicator.ResourceApiVersion was just called")
	}
	callInfo := struct {
	}{}
	mock.lockResourceApiVersion.Lock()
	mock.calls.ResourceApiVersion = append(mock.calls.ResourceApiVersion, callInfo)
	mock.lockResourceApiVersion.Unlock()
	return mock.ResourceApiVersionFunc()
}

// ResourceApiVersionCalls gets all the calls that were made to ResourceApiVersion.
// Check the length with:
//     len(mockedResourceReplicator.ResourceApiVersionCalls())
func (mock *ResourceReplicatorMock) ResourceApiVersionCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockResourceApiVersion.RLock()
	calls = mock.calls.ResourceApiVersion
	mock.lockResourceApiVersion.RUnlock()
	return calls
}

// ResourceKind calls ResourceKindFunc.
func (mock *ResourceReplicatorMock) ResourceKind() string {
	if mock.ResourceKindFunc == nil {
		panic("ResourceReplicatorMock.ResourceKindFunc: method is nil but ResourceReplicator.ResourceKind was just called")
	}
	callInfo := struct {
	}{}
	mock.lockResourceKind.Lock()
	mock.calls.ResourceKind = append(mock.calls.ResourceKind, callInfo)
	mock.lockResourceKind.Unlock()
	return mock.ResourceKindFunc()
}

// ResourceKindCalls gets all the calls that were made to ResourceKind.
// Check the length with:
//     len(mockedResourceReplicator.ResourceKindCalls())
func (mock *ResourceReplicatorMock) ResourceKindCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockResourceKind.RLock()
	calls = mock.calls.ResourceKind
	mock.lockResourceKind.RUnlock()
	return calls
}
