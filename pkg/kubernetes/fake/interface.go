// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fake

import (
	"context"
	"sync"

	"github.com/nadundesilva/k8s-replicator/pkg/kubernetes"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// Ensure, that ClientInterfaceMock does implement kubernetes.ClientInterface.
// If this is not the case, regenerate this file with moq.
var _ kubernetes.ClientInterface = &ClientInterfaceMock{}

// ClientInterfaceMock is a mock implementation of kubernetes.ClientInterface.
//
// 	func TestSomethingThatUsesClientInterface(t *testing.T) {
//
// 		// make and configure a mocked kubernetes.ClientInterface
// 		mockedClientInterface := &ClientInterfaceMock{
// 			ApplyConfigMapFunc: func(ctx context.Context, namespace string, configMap *corev1.ConfigMap) (*corev1.ConfigMap, error) {
// 				panic("mock out the ApplyConfigMap method")
// 			},
// 			ApplyNetworkPolicyFunc: func(ctx context.Context, namespace string, netpol *networkingv1.NetworkPolicy) (*networkingv1.NetworkPolicy, error) {
// 				panic("mock out the ApplyNetworkPolicy method")
// 			},
// 			ApplySecretFunc: func(ctx context.Context, namespace string, secret *corev1.Secret) (*corev1.Secret, error) {
// 				panic("mock out the ApplySecret method")
// 			},
// 			ConfigMapInformerFunc: func() cache.SharedIndexInformer {
// 				panic("mock out the ConfigMapInformer method")
// 			},
// 			DeleteConfigMapFunc: func(ctx context.Context, namespace string, name string) error {
// 				panic("mock out the DeleteConfigMap method")
// 			},
// 			DeleteNetworkPolicyFunc: func(ctx context.Context, namespace string, name string) error {
// 				panic("mock out the DeleteNetworkPolicy method")
// 			},
// 			DeleteSecretFunc: func(ctx context.Context, namespace string, name string) error {
// 				panic("mock out the DeleteSecret method")
// 			},
// 			GetConfigMapFunc: func(ctx context.Context, namespace string, name string) (*corev1.ConfigMap, error) {
// 				panic("mock out the GetConfigMap method")
// 			},
// 			GetNamespaceFunc: func(ctx context.Context, name string) (*corev1.Namespace, error) {
// 				panic("mock out the GetNamespace method")
// 			},
// 			GetNetworkPolicyFunc: func(ctx context.Context, namespace string, name string) (*networkingv1.NetworkPolicy, error) {
// 				panic("mock out the GetNetworkPolicy method")
// 			},
// 			GetSecretFunc: func(ctx context.Context, namespace string, name string) (*corev1.Secret, error) {
// 				panic("mock out the GetSecret method")
// 			},
// 			ListConfigMapsFunc: func(namespace string, selector labels.Selector) ([]*corev1.ConfigMap, error) {
// 				panic("mock out the ListConfigMaps method")
// 			},
// 			ListNamespacesFunc: func(selector labels.Selector) ([]*corev1.Namespace, error) {
// 				panic("mock out the ListNamespaces method")
// 			},
// 			ListNetworkPoliciesFunc: func(namespace string, selector labels.Selector) ([]*networkingv1.NetworkPolicy, error) {
// 				panic("mock out the ListNetworkPolicies method")
// 			},
// 			ListSecretsFunc: func(namespace string, selector labels.Selector) ([]*corev1.Secret, error) {
// 				panic("mock out the ListSecrets method")
// 			},
// 			NamespaceInformerFunc: func() cache.SharedIndexInformer {
// 				panic("mock out the NamespaceInformer method")
// 			},
// 			NetworkPolicyInformerFunc: func() cache.SharedIndexInformer {
// 				panic("mock out the NetworkPolicyInformer method")
// 			},
// 			SecretInformerFunc: func() cache.SharedIndexInformer {
// 				panic("mock out the SecretInformer method")
// 			},
// 		}
//
// 		// use mockedClientInterface in code that requires kubernetes.ClientInterface
// 		// and then make assertions.
//
// 	}
type ClientInterfaceMock struct {
	// ApplyConfigMapFunc mocks the ApplyConfigMap method.
	ApplyConfigMapFunc func(ctx context.Context, namespace string, configMap *corev1.ConfigMap) (*corev1.ConfigMap, error)

	// ApplyNetworkPolicyFunc mocks the ApplyNetworkPolicy method.
	ApplyNetworkPolicyFunc func(ctx context.Context, namespace string, netpol *networkingv1.NetworkPolicy) (*networkingv1.NetworkPolicy, error)

	// ApplySecretFunc mocks the ApplySecret method.
	ApplySecretFunc func(ctx context.Context, namespace string, secret *corev1.Secret) (*corev1.Secret, error)

	// ConfigMapInformerFunc mocks the ConfigMapInformer method.
	ConfigMapInformerFunc func() cache.SharedIndexInformer

	// DeleteConfigMapFunc mocks the DeleteConfigMap method.
	DeleteConfigMapFunc func(ctx context.Context, namespace string, name string) error

	// DeleteNetworkPolicyFunc mocks the DeleteNetworkPolicy method.
	DeleteNetworkPolicyFunc func(ctx context.Context, namespace string, name string) error

	// DeleteSecretFunc mocks the DeleteSecret method.
	DeleteSecretFunc func(ctx context.Context, namespace string, name string) error

	// GetConfigMapFunc mocks the GetConfigMap method.
	GetConfigMapFunc func(ctx context.Context, namespace string, name string) (*corev1.ConfigMap, error)

	// GetNamespaceFunc mocks the GetNamespace method.
	GetNamespaceFunc func(ctx context.Context, name string) (*corev1.Namespace, error)

	// GetNetworkPolicyFunc mocks the GetNetworkPolicy method.
	GetNetworkPolicyFunc func(ctx context.Context, namespace string, name string) (*networkingv1.NetworkPolicy, error)

	// GetSecretFunc mocks the GetSecret method.
	GetSecretFunc func(ctx context.Context, namespace string, name string) (*corev1.Secret, error)

	// ListConfigMapsFunc mocks the ListConfigMaps method.
	ListConfigMapsFunc func(namespace string, selector labels.Selector) ([]*corev1.ConfigMap, error)

	// ListNamespacesFunc mocks the ListNamespaces method.
	ListNamespacesFunc func(selector labels.Selector) ([]*corev1.Namespace, error)

	// ListNetworkPoliciesFunc mocks the ListNetworkPolicies method.
	ListNetworkPoliciesFunc func(namespace string, selector labels.Selector) ([]*networkingv1.NetworkPolicy, error)

	// ListSecretsFunc mocks the ListSecrets method.
	ListSecretsFunc func(namespace string, selector labels.Selector) ([]*corev1.Secret, error)

	// NamespaceInformerFunc mocks the NamespaceInformer method.
	NamespaceInformerFunc func() cache.SharedIndexInformer

	// NetworkPolicyInformerFunc mocks the NetworkPolicyInformer method.
	NetworkPolicyInformerFunc func() cache.SharedIndexInformer

	// SecretInformerFunc mocks the SecretInformer method.
	SecretInformerFunc func() cache.SharedIndexInformer

	// calls tracks calls to the methods.
	calls struct {
		// ApplyConfigMap holds details about calls to the ApplyConfigMap method.
		ApplyConfigMap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// ConfigMap is the configMap argument value.
			ConfigMap *corev1.ConfigMap
		}
		// ApplyNetworkPolicy holds details about calls to the ApplyNetworkPolicy method.
		ApplyNetworkPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Netpol is the netpol argument value.
			Netpol *networkingv1.NetworkPolicy
		}
		// ApplySecret holds details about calls to the ApplySecret method.
		ApplySecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Secret is the secret argument value.
			Secret *corev1.Secret
		}
		// ConfigMapInformer holds details about calls to the ConfigMapInformer method.
		ConfigMapInformer []struct {
		}
		// DeleteConfigMap holds details about calls to the DeleteConfigMap method.
		DeleteConfigMap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// DeleteNetworkPolicy holds details about calls to the DeleteNetworkPolicy method.
		DeleteNetworkPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// DeleteSecret holds details about calls to the DeleteSecret method.
		DeleteSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetConfigMap holds details about calls to the GetConfigMap method.
		GetConfigMap []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetNamespace holds details about calls to the GetNamespace method.
		GetNamespace []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
		}
		// GetNetworkPolicy holds details about calls to the GetNetworkPolicy method.
		GetNetworkPolicy []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// GetSecret holds details about calls to the GetSecret method.
		GetSecret []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// ListConfigMaps holds details about calls to the ListConfigMaps method.
		ListConfigMaps []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
		// ListNamespaces holds details about calls to the ListNamespaces method.
		ListNamespaces []struct {
			// Selector is the selector argument value.
			Selector labels.Selector
		}
		// ListNetworkPolicies holds details about calls to the ListNetworkPolicies method.
		ListNetworkPolicies []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
		// ListSecrets holds details about calls to the ListSecrets method.
		ListSecrets []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
		// NamespaceInformer holds details about calls to the NamespaceInformer method.
		NamespaceInformer []struct {
		}
		// NetworkPolicyInformer holds details about calls to the NetworkPolicyInformer method.
		NetworkPolicyInformer []struct {
		}
		// SecretInformer holds details about calls to the SecretInformer method.
		SecretInformer []struct {
		}
	}
	lockApplyConfigMap        sync.RWMutex
	lockApplyNetworkPolicy    sync.RWMutex
	lockApplySecret           sync.RWMutex
	lockConfigMapInformer     sync.RWMutex
	lockDeleteConfigMap       sync.RWMutex
	lockDeleteNetworkPolicy   sync.RWMutex
	lockDeleteSecret          sync.RWMutex
	lockGetConfigMap          sync.RWMutex
	lockGetNamespace          sync.RWMutex
	lockGetNetworkPolicy      sync.RWMutex
	lockGetSecret             sync.RWMutex
	lockListConfigMaps        sync.RWMutex
	lockListNamespaces        sync.RWMutex
	lockListNetworkPolicies   sync.RWMutex
	lockListSecrets           sync.RWMutex
	lockNamespaceInformer     sync.RWMutex
	lockNetworkPolicyInformer sync.RWMutex
	lockSecretInformer        sync.RWMutex
}

// ApplyConfigMap calls ApplyConfigMapFunc.
func (mock *ClientInterfaceMock) ApplyConfigMap(ctx context.Context, namespace string, configMap *corev1.ConfigMap) (*corev1.ConfigMap, error) {
	if mock.ApplyConfigMapFunc == nil {
		panic("ClientInterfaceMock.ApplyConfigMapFunc: method is nil but ClientInterface.ApplyConfigMap was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		ConfigMap *corev1.ConfigMap
	}{
		Ctx:       ctx,
		Namespace: namespace,
		ConfigMap: configMap,
	}
	mock.lockApplyConfigMap.Lock()
	mock.calls.ApplyConfigMap = append(mock.calls.ApplyConfigMap, callInfo)
	mock.lockApplyConfigMap.Unlock()
	return mock.ApplyConfigMapFunc(ctx, namespace, configMap)
}

// ApplyConfigMapCalls gets all the calls that were made to ApplyConfigMap.
// Check the length with:
//     len(mockedClientInterface.ApplyConfigMapCalls())
func (mock *ClientInterfaceMock) ApplyConfigMapCalls() []struct {
	Ctx       context.Context
	Namespace string
	ConfigMap *corev1.ConfigMap
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		ConfigMap *corev1.ConfigMap
	}
	mock.lockApplyConfigMap.RLock()
	calls = mock.calls.ApplyConfigMap
	mock.lockApplyConfigMap.RUnlock()
	return calls
}

// ApplyNetworkPolicy calls ApplyNetworkPolicyFunc.
func (mock *ClientInterfaceMock) ApplyNetworkPolicy(ctx context.Context, namespace string, netpol *networkingv1.NetworkPolicy) (*networkingv1.NetworkPolicy, error) {
	if mock.ApplyNetworkPolicyFunc == nil {
		panic("ClientInterfaceMock.ApplyNetworkPolicyFunc: method is nil but ClientInterface.ApplyNetworkPolicy was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Netpol    *networkingv1.NetworkPolicy
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Netpol:    netpol,
	}
	mock.lockApplyNetworkPolicy.Lock()
	mock.calls.ApplyNetworkPolicy = append(mock.calls.ApplyNetworkPolicy, callInfo)
	mock.lockApplyNetworkPolicy.Unlock()
	return mock.ApplyNetworkPolicyFunc(ctx, namespace, netpol)
}

// ApplyNetworkPolicyCalls gets all the calls that were made to ApplyNetworkPolicy.
// Check the length with:
//     len(mockedClientInterface.ApplyNetworkPolicyCalls())
func (mock *ClientInterfaceMock) ApplyNetworkPolicyCalls() []struct {
	Ctx       context.Context
	Namespace string
	Netpol    *networkingv1.NetworkPolicy
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Netpol    *networkingv1.NetworkPolicy
	}
	mock.lockApplyNetworkPolicy.RLock()
	calls = mock.calls.ApplyNetworkPolicy
	mock.lockApplyNetworkPolicy.RUnlock()
	return calls
}

// ApplySecret calls ApplySecretFunc.
func (mock *ClientInterfaceMock) ApplySecret(ctx context.Context, namespace string, secret *corev1.Secret) (*corev1.Secret, error) {
	if mock.ApplySecretFunc == nil {
		panic("ClientInterfaceMock.ApplySecretFunc: method is nil but ClientInterface.ApplySecret was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Secret    *corev1.Secret
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Secret:    secret,
	}
	mock.lockApplySecret.Lock()
	mock.calls.ApplySecret = append(mock.calls.ApplySecret, callInfo)
	mock.lockApplySecret.Unlock()
	return mock.ApplySecretFunc(ctx, namespace, secret)
}

// ApplySecretCalls gets all the calls that were made to ApplySecret.
// Check the length with:
//     len(mockedClientInterface.ApplySecretCalls())
func (mock *ClientInterfaceMock) ApplySecretCalls() []struct {
	Ctx       context.Context
	Namespace string
	Secret    *corev1.Secret
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Secret    *corev1.Secret
	}
	mock.lockApplySecret.RLock()
	calls = mock.calls.ApplySecret
	mock.lockApplySecret.RUnlock()
	return calls
}

// ConfigMapInformer calls ConfigMapInformerFunc.
func (mock *ClientInterfaceMock) ConfigMapInformer() cache.SharedIndexInformer {
	if mock.ConfigMapInformerFunc == nil {
		panic("ClientInterfaceMock.ConfigMapInformerFunc: method is nil but ClientInterface.ConfigMapInformer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockConfigMapInformer.Lock()
	mock.calls.ConfigMapInformer = append(mock.calls.ConfigMapInformer, callInfo)
	mock.lockConfigMapInformer.Unlock()
	return mock.ConfigMapInformerFunc()
}

// ConfigMapInformerCalls gets all the calls that were made to ConfigMapInformer.
// Check the length with:
//     len(mockedClientInterface.ConfigMapInformerCalls())
func (mock *ClientInterfaceMock) ConfigMapInformerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockConfigMapInformer.RLock()
	calls = mock.calls.ConfigMapInformer
	mock.lockConfigMapInformer.RUnlock()
	return calls
}

// DeleteConfigMap calls DeleteConfigMapFunc.
func (mock *ClientInterfaceMock) DeleteConfigMap(ctx context.Context, namespace string, name string) error {
	if mock.DeleteConfigMapFunc == nil {
		panic("ClientInterfaceMock.DeleteConfigMapFunc: method is nil but ClientInterface.DeleteConfigMap was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockDeleteConfigMap.Lock()
	mock.calls.DeleteConfigMap = append(mock.calls.DeleteConfigMap, callInfo)
	mock.lockDeleteConfigMap.Unlock()
	return mock.DeleteConfigMapFunc(ctx, namespace, name)
}

// DeleteConfigMapCalls gets all the calls that were made to DeleteConfigMap.
// Check the length with:
//     len(mockedClientInterface.DeleteConfigMapCalls())
func (mock *ClientInterfaceMock) DeleteConfigMapCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockDeleteConfigMap.RLock()
	calls = mock.calls.DeleteConfigMap
	mock.lockDeleteConfigMap.RUnlock()
	return calls
}

// DeleteNetworkPolicy calls DeleteNetworkPolicyFunc.
func (mock *ClientInterfaceMock) DeleteNetworkPolicy(ctx context.Context, namespace string, name string) error {
	if mock.DeleteNetworkPolicyFunc == nil {
		panic("ClientInterfaceMock.DeleteNetworkPolicyFunc: method is nil but ClientInterface.DeleteNetworkPolicy was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockDeleteNetworkPolicy.Lock()
	mock.calls.DeleteNetworkPolicy = append(mock.calls.DeleteNetworkPolicy, callInfo)
	mock.lockDeleteNetworkPolicy.Unlock()
	return mock.DeleteNetworkPolicyFunc(ctx, namespace, name)
}

// DeleteNetworkPolicyCalls gets all the calls that were made to DeleteNetworkPolicy.
// Check the length with:
//     len(mockedClientInterface.DeleteNetworkPolicyCalls())
func (mock *ClientInterfaceMock) DeleteNetworkPolicyCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockDeleteNetworkPolicy.RLock()
	calls = mock.calls.DeleteNetworkPolicy
	mock.lockDeleteNetworkPolicy.RUnlock()
	return calls
}

// DeleteSecret calls DeleteSecretFunc.
func (mock *ClientInterfaceMock) DeleteSecret(ctx context.Context, namespace string, name string) error {
	if mock.DeleteSecretFunc == nil {
		panic("ClientInterfaceMock.DeleteSecretFunc: method is nil but ClientInterface.DeleteSecret was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockDeleteSecret.Lock()
	mock.calls.DeleteSecret = append(mock.calls.DeleteSecret, callInfo)
	mock.lockDeleteSecret.Unlock()
	return mock.DeleteSecretFunc(ctx, namespace, name)
}

// DeleteSecretCalls gets all the calls that were made to DeleteSecret.
// Check the length with:
//     len(mockedClientInterface.DeleteSecretCalls())
func (mock *ClientInterfaceMock) DeleteSecretCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockDeleteSecret.RLock()
	calls = mock.calls.DeleteSecret
	mock.lockDeleteSecret.RUnlock()
	return calls
}

// GetConfigMap calls GetConfigMapFunc.
func (mock *ClientInterfaceMock) GetConfigMap(ctx context.Context, namespace string, name string) (*corev1.ConfigMap, error) {
	if mock.GetConfigMapFunc == nil {
		panic("ClientInterfaceMock.GetConfigMapFunc: method is nil but ClientInterface.GetConfigMap was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGetConfigMap.Lock()
	mock.calls.GetConfigMap = append(mock.calls.GetConfigMap, callInfo)
	mock.lockGetConfigMap.Unlock()
	return mock.GetConfigMapFunc(ctx, namespace, name)
}

// GetConfigMapCalls gets all the calls that were made to GetConfigMap.
// Check the length with:
//     len(mockedClientInterface.GetConfigMapCalls())
func (mock *ClientInterfaceMock) GetConfigMapCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockGetConfigMap.RLock()
	calls = mock.calls.GetConfigMap
	mock.lockGetConfigMap.RUnlock()
	return calls
}

// GetNamespace calls GetNamespaceFunc.
func (mock *ClientInterfaceMock) GetNamespace(ctx context.Context, name string) (*corev1.Namespace, error) {
	if mock.GetNamespaceFunc == nil {
		panic("ClientInterfaceMock.GetNamespaceFunc: method is nil but ClientInterface.GetNamespace was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
	}{
		Ctx:  ctx,
		Name: name,
	}
	mock.lockGetNamespace.Lock()
	mock.calls.GetNamespace = append(mock.calls.GetNamespace, callInfo)
	mock.lockGetNamespace.Unlock()
	return mock.GetNamespaceFunc(ctx, name)
}

// GetNamespaceCalls gets all the calls that were made to GetNamespace.
// Check the length with:
//     len(mockedClientInterface.GetNamespaceCalls())
func (mock *ClientInterfaceMock) GetNamespaceCalls() []struct {
	Ctx  context.Context
	Name string
} {
	var calls []struct {
		Ctx  context.Context
		Name string
	}
	mock.lockGetNamespace.RLock()
	calls = mock.calls.GetNamespace
	mock.lockGetNamespace.RUnlock()
	return calls
}

// GetNetworkPolicy calls GetNetworkPolicyFunc.
func (mock *ClientInterfaceMock) GetNetworkPolicy(ctx context.Context, namespace string, name string) (*networkingv1.NetworkPolicy, error) {
	if mock.GetNetworkPolicyFunc == nil {
		panic("ClientInterfaceMock.GetNetworkPolicyFunc: method is nil but ClientInterface.GetNetworkPolicy was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGetNetworkPolicy.Lock()
	mock.calls.GetNetworkPolicy = append(mock.calls.GetNetworkPolicy, callInfo)
	mock.lockGetNetworkPolicy.Unlock()
	return mock.GetNetworkPolicyFunc(ctx, namespace, name)
}

// GetNetworkPolicyCalls gets all the calls that were made to GetNetworkPolicy.
// Check the length with:
//     len(mockedClientInterface.GetNetworkPolicyCalls())
func (mock *ClientInterfaceMock) GetNetworkPolicyCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockGetNetworkPolicy.RLock()
	calls = mock.calls.GetNetworkPolicy
	mock.lockGetNetworkPolicy.RUnlock()
	return calls
}

// GetSecret calls GetSecretFunc.
func (mock *ClientInterfaceMock) GetSecret(ctx context.Context, namespace string, name string) (*corev1.Secret, error) {
	if mock.GetSecretFunc == nil {
		panic("ClientInterfaceMock.GetSecretFunc: method is nil but ClientInterface.GetSecret was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}{
		Ctx:       ctx,
		Namespace: namespace,
		Name:      name,
	}
	mock.lockGetSecret.Lock()
	mock.calls.GetSecret = append(mock.calls.GetSecret, callInfo)
	mock.lockGetSecret.Unlock()
	return mock.GetSecretFunc(ctx, namespace, name)
}

// GetSecretCalls gets all the calls that were made to GetSecret.
// Check the length with:
//     len(mockedClientInterface.GetSecretCalls())
func (mock *ClientInterfaceMock) GetSecretCalls() []struct {
	Ctx       context.Context
	Namespace string
	Name      string
} {
	var calls []struct {
		Ctx       context.Context
		Namespace string
		Name      string
	}
	mock.lockGetSecret.RLock()
	calls = mock.calls.GetSecret
	mock.lockGetSecret.RUnlock()
	return calls
}

// ListConfigMaps calls ListConfigMapsFunc.
func (mock *ClientInterfaceMock) ListConfigMaps(namespace string, selector labels.Selector) ([]*corev1.ConfigMap, error) {
	if mock.ListConfigMapsFunc == nil {
		panic("ClientInterfaceMock.ListConfigMapsFunc: method is nil but ClientInterface.ListConfigMaps was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	mock.lockListConfigMaps.Lock()
	mock.calls.ListConfigMaps = append(mock.calls.ListConfigMaps, callInfo)
	mock.lockListConfigMaps.Unlock()
	return mock.ListConfigMapsFunc(namespace, selector)
}

// ListConfigMapsCalls gets all the calls that were made to ListConfigMaps.
// Check the length with:
//     len(mockedClientInterface.ListConfigMapsCalls())
func (mock *ClientInterfaceMock) ListConfigMapsCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	mock.lockListConfigMaps.RLock()
	calls = mock.calls.ListConfigMaps
	mock.lockListConfigMaps.RUnlock()
	return calls
}

// ListNamespaces calls ListNamespacesFunc.
func (mock *ClientInterfaceMock) ListNamespaces(selector labels.Selector) ([]*corev1.Namespace, error) {
	if mock.ListNamespacesFunc == nil {
		panic("ClientInterfaceMock.ListNamespacesFunc: method is nil but ClientInterface.ListNamespaces was just called")
	}
	callInfo := struct {
		Selector labels.Selector
	}{
		Selector: selector,
	}
	mock.lockListNamespaces.Lock()
	mock.calls.ListNamespaces = append(mock.calls.ListNamespaces, callInfo)
	mock.lockListNamespaces.Unlock()
	return mock.ListNamespacesFunc(selector)
}

// ListNamespacesCalls gets all the calls that were made to ListNamespaces.
// Check the length with:
//     len(mockedClientInterface.ListNamespacesCalls())
func (mock *ClientInterfaceMock) ListNamespacesCalls() []struct {
	Selector labels.Selector
} {
	var calls []struct {
		Selector labels.Selector
	}
	mock.lockListNamespaces.RLock()
	calls = mock.calls.ListNamespaces
	mock.lockListNamespaces.RUnlock()
	return calls
}

// ListNetworkPolicies calls ListNetworkPoliciesFunc.
func (mock *ClientInterfaceMock) ListNetworkPolicies(namespace string, selector labels.Selector) ([]*networkingv1.NetworkPolicy, error) {
	if mock.ListNetworkPoliciesFunc == nil {
		panic("ClientInterfaceMock.ListNetworkPoliciesFunc: method is nil but ClientInterface.ListNetworkPolicies was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	mock.lockListNetworkPolicies.Lock()
	mock.calls.ListNetworkPolicies = append(mock.calls.ListNetworkPolicies, callInfo)
	mock.lockListNetworkPolicies.Unlock()
	return mock.ListNetworkPoliciesFunc(namespace, selector)
}

// ListNetworkPoliciesCalls gets all the calls that were made to ListNetworkPolicies.
// Check the length with:
//     len(mockedClientInterface.ListNetworkPoliciesCalls())
func (mock *ClientInterfaceMock) ListNetworkPoliciesCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	mock.lockListNetworkPolicies.RLock()
	calls = mock.calls.ListNetworkPolicies
	mock.lockListNetworkPolicies.RUnlock()
	return calls
}

// ListSecrets calls ListSecretsFunc.
func (mock *ClientInterfaceMock) ListSecrets(namespace string, selector labels.Selector) ([]*corev1.Secret, error) {
	if mock.ListSecretsFunc == nil {
		panic("ClientInterfaceMock.ListSecretsFunc: method is nil but ClientInterface.ListSecrets was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	mock.lockListSecrets.Lock()
	mock.calls.ListSecrets = append(mock.calls.ListSecrets, callInfo)
	mock.lockListSecrets.Unlock()
	return mock.ListSecretsFunc(namespace, selector)
}

// ListSecretsCalls gets all the calls that were made to ListSecrets.
// Check the length with:
//     len(mockedClientInterface.ListSecretsCalls())
func (mock *ClientInterfaceMock) ListSecretsCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	mock.lockListSecrets.RLock()
	calls = mock.calls.ListSecrets
	mock.lockListSecrets.RUnlock()
	return calls
}

// NamespaceInformer calls NamespaceInformerFunc.
func (mock *ClientInterfaceMock) NamespaceInformer() cache.SharedIndexInformer {
	if mock.NamespaceInformerFunc == nil {
		panic("ClientInterfaceMock.NamespaceInformerFunc: method is nil but ClientInterface.NamespaceInformer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNamespaceInformer.Lock()
	mock.calls.NamespaceInformer = append(mock.calls.NamespaceInformer, callInfo)
	mock.lockNamespaceInformer.Unlock()
	return mock.NamespaceInformerFunc()
}

// NamespaceInformerCalls gets all the calls that were made to NamespaceInformer.
// Check the length with:
//     len(mockedClientInterface.NamespaceInformerCalls())
func (mock *ClientInterfaceMock) NamespaceInformerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNamespaceInformer.RLock()
	calls = mock.calls.NamespaceInformer
	mock.lockNamespaceInformer.RUnlock()
	return calls
}

// NetworkPolicyInformer calls NetworkPolicyInformerFunc.
func (mock *ClientInterfaceMock) NetworkPolicyInformer() cache.SharedIndexInformer {
	if mock.NetworkPolicyInformerFunc == nil {
		panic("ClientInterfaceMock.NetworkPolicyInformerFunc: method is nil but ClientInterface.NetworkPolicyInformer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockNetworkPolicyInformer.Lock()
	mock.calls.NetworkPolicyInformer = append(mock.calls.NetworkPolicyInformer, callInfo)
	mock.lockNetworkPolicyInformer.Unlock()
	return mock.NetworkPolicyInformerFunc()
}

// NetworkPolicyInformerCalls gets all the calls that were made to NetworkPolicyInformer.
// Check the length with:
//     len(mockedClientInterface.NetworkPolicyInformerCalls())
func (mock *ClientInterfaceMock) NetworkPolicyInformerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockNetworkPolicyInformer.RLock()
	calls = mock.calls.NetworkPolicyInformer
	mock.lockNetworkPolicyInformer.RUnlock()
	return calls
}

// SecretInformer calls SecretInformerFunc.
func (mock *ClientInterfaceMock) SecretInformer() cache.SharedIndexInformer {
	if mock.SecretInformerFunc == nil {
		panic("ClientInterfaceMock.SecretInformerFunc: method is nil but ClientInterface.SecretInformer was just called")
	}
	callInfo := struct {
	}{}
	mock.lockSecretInformer.Lock()
	mock.calls.SecretInformer = append(mock.calls.SecretInformer, callInfo)
	mock.lockSecretInformer.Unlock()
	return mock.SecretInformerFunc()
}

// SecretInformerCalls gets all the calls that were made to SecretInformer.
// Check the length with:
//     len(mockedClientInterface.SecretInformerCalls())
func (mock *ClientInterfaceMock) SecretInformerCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockSecretInformer.RLock()
	calls = mock.calls.SecretInformer
	mock.lockSecretInformer.RUnlock()
	return calls
}
